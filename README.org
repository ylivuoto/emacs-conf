* Emacs configuration
All the sections below will contain declarations for my emacs
setup. When using .org configuration file, please include a short line
in your .emacs or init.el file

#+HEADER: :eval no :exports code
#+BEGIN_SRC
  ;; Include something like this your .emacs file:
  (org-babel-load-file (expand-file-name "~/.emacs.d/my-conf.org"))
#+END_SRC

or similar to include your fresh config file! Also, be careful when
making changes. Sometimes, when making changes to settings
graphically, emacs will create some new lines to .emacs file and there
will be duplicates with the .org config file - watch out those!

Well, your *.emacs* file might look something like this:

#+HEADER: :eval no :exports code
#+BEGIN_SRC
  ;; Let's set up essential package archives
  (require 'package)
  (add-to-list 'package-archives
 	       '("melpa" . "http://melpa.org/packages/") t)
  (unless package--initialized (package-initialize))
  
  ;; For ease of use, highly recommended to use this package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  ;; The rest of the configuration is taken care in a separate file, at
  ;; the moment called README.org but may be named whatever sensible.
  (add-to-list 'load-path "~/.emacs.d/extra-config-files/")
  (org-babel-load-file (expand-file-name "~/.emacs.d/extra-config-files/my-conf.org"))
#+END_SRC

* Configuration file starts from here

Structured configuration file for Emacs with org mode. Since you
already have something in your *.emacs* file, these will take effect
when emacs starts.

** General
#+BEGIN_SRC emacs-lisp
  ;;  describe-coding-system 'unix
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (or (daemonp) (memq window-system '(ns x)))
      (exec-path-from-shell-initialize)))
#+END_SRC
** Appearance
Here are collection of delcarations and packages that mainly affects
to appearance of emacs.
*** Window

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  menu-bar-mode nil
  tool-bar-mode nil
  current-language-environment "UTF-8"
  custom-enabled-themes '(misterioso)
  global-display-line-numbers-mode t
  fringe-mode '(16 . 0)
  window-divider-mode t
  window-divider-default-places 'right-only
  window-divider-default-right-width 1
  font-lock-maximum-decoration t
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (lambda ()
                               (drag-stuff-global-mode 1)
                               (toggle-scroll-bar 0)
                               (my-startup-func)))

  (defun my-startup-func ()
    (require 'widget)
      "Startup buffer"
      (let ((start-buffer (get-buffer-create "STARTUP")))
        (with-current-buffer start-buffer
          ;; this is what you customize
          (setq img (create-image "d:/youtubevideot/logo/logo_solid_white.png" 'png nil :heuristic-mask t))
          (insert-image img)
          (insert-button "\nHome\n" 'action (lambda (x) (find-file "~/")))
          (insert-button "Main Configurations\n" 'action (lambda (x) (find-file "~/.emacs")))
          (insert-button "Custom Configurations\n\n" 'action (lambda (x) (find-file "~/.emacs.d/emacs-conf/README.org")))
          (insert-button "Notes\n" 'action (lambda (x) (find-file "d:/notes/"))))
        (switch-to-buffer start-buffer)))
#+END_SRC

*** Mode line
**** Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-default-theme))

#+END_SRC

**** Appearance declarations

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mode-line nil
		      :background "dark slate grey"
		      :foreground "white"
		      :box '(:line-width 1 :color "dark slate grey")
		      :overline nil
		      :underline nil)

  (set-face-attribute 'mode-line-inactive nil
		      :background "#182b2b"
		      :foreground "white"
		      :box '(:line-width 1 :color "#182b2b")
		      :overline nil
		      :underline nil)

  (set-face-attribute 'powerline-active1 nil
		      :background "DarkSlateGray4"
		      :foreground "black"
		      :overline nil
		      :underline nil)

  (set-face-attribute 'powerline-active2 nil
		      :background "DarkSlateGray3"
		      :foreground "black"
		      :overline nil
		      :underline nil)

  (set-face-attribute 'powerline-inactive2 nil
		      :background "#182b2b"
		      :foreground "white"
		      :overline nil
		      :underline nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  column-number-mode t
  mode-line-compact nil
  powerline-default-separator 'arrow
  powerline-height 38
#+END_SRC

*** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)
				     (org-indent-mode))))
#+END_SRC

**** Appearance of bullets
#+BEGIN_SRC emacs-lisp
  (setq org-bullets-bullet-list '("●"
                                  "○"
                                  "•"
                                  "◆"))

  ;;'("α"
  ;;  "β"
  ;;  "λ"
  ;;  "ω")
#+END_SRC

** Usability packages
These helps you to use directories without breaking your nerves!
*** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init (global-set-key [f8] 'neotree-toggle))
  neo-smart-open t
#+END_SRC

*** Drag-stuff
#+BEGIN_SRC emacs-lisp
    (use-package drag-stuff
      :ensure t
      :init (add-hook 'after-init-hook (lambda () (drag-stuff-global-mode 1))))
    ;;(add-hook 'org-mode-hook (lambda () (drag-stuff-global-mode 1)))

  (with-eval-after-load 'org
    (define-key org-mode-map [(control shift up)]  'drag-stuff-up)
    (define-key org-mode-map [(control shift down)]  'drag-stuff-down))

#+END_SRC

*** Helm
Suggests and organizes stuff, when giving commands etc.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind ("M-x" . helm-M-x)
    :init (helm-mode 1))
#+END_SRC

**** Appearance tweak
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'helm-header nil
                      :background "dark slate grey"
                      :foreground "white"
                      :box '(:line-width 8 :color "dark slate gray"))

  (set-face-attribute 'helm-source-header nil
                      :background "dark slate grey"
                      :foreground "white"
                      :box '(:line-width 2 :color "dark slate grey"))

  (set-face-attribute 'helm-selection nil
                      :background nil
                      :foreground "orange"
                      :weight 'bold)

  (set-face-attribute 'helm-candidate-number nil
                      :background "DarkSlateGray3"
                      :box '(:line-width 8 :color "DarkSlateGray3")
                      :extend nil)


#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode t))
#+END_SRC

Let's also define paths for snippets, they will be organized all into
their own folders and files.
#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs '("~/emacs.d/snippets/org-mode"))
#+END_SRC

*** Company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (setq company-backends '((company-clang)
                                     (company-yasnippet)))
    :init (global-company-mode t))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init (add-hook 'org-mode-hook (lambda () '(require smartparens-org))))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (global-flycheck-mode))
#+END_SRC
** Coding and versioning
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC

*** Web dev
**** JS
**** TS
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    "Set up tide mode and turn on related modes with tide specific configurations."
    (tide-setup)
    (tide-hl-identifier-mode 1)
    (flycheck-mode 1)
    (setq flycheck-check-syntax-automatically
          '(save mode-enabled idle-change)
          (company-mode 1)
          (eldoc-mode 1)

          (use-package tide
            :ensure t
            :after (typescript-mode flycheck company)
            :hook ((typescript-mode . setup-tide-mode)
                   (before-save . tide-format-before-save)))
#+END_SRC
**** HTML
**** CSS
** Misc
Some variable declarations and/or packages which might be useful too.
*** Mail settings
Send mail using SMTP via Google. 
Send mail using SMTP on the mail submission port 587.
#+BEGIN_SRC emacs-lisp
  (setq smtpmail-smtp-server "imap.gmail.com")
  (setq smtpmail-smtp-service 587)
#+END_SRC


